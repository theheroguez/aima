package com.theheroguez.aima.agents;

import com.theheroguez.aima.Model;
import com.theheroguez.aima.Rule;
import com.theheroguez.aima.State;

import java.util.List;
import java.util.Optional;

/**
 * The ModelBasedReflexAgent is an abstract class that represents an agent
 * that uses a model of the environment and a set of rules to make decisions and take actions.
 * function MODEL-BASED-REFLEX-AGENT(percept) return an action
 *  persistent: state, the agent's current conception of the world state
 *              transition_model, a description of how the next state depends on the current state action
 *              sensor_model, a description of how the current world state is reflected in the agent's percepts
 *              rules, a set of condition-action rules
 *              action, the most recent action, initially none
 *
 * @param <P> the type of percepts the agent receives
 * @param <A> the type of actions the agent produces
 */
public abstract class ModelBasedReflexAgent<P, A> implements Agent<P, A> {
    private State state;
    private final Model model;
    private A action = null;
    private final List<Rule<A>> rules;

    protected ModelBasedReflexAgent(Model model, List<Rule<A>> rules) {
        this.model = model;
        this.rules = rules;
    }

    /**
     * Applies the agent's knowledge to the given percept and produces an optional action.
     *
     * @param percept the percept to process
     * @return an optional action generated by the agent based on the percept
     */
    @Override
    public Optional<A> apply(P percept) {
        state = updateState(state, action, percept, model);
        Rule<A> rule = ruleMatch(state);
        action = rule.getAction();
        return Optional.ofNullable(action);
    }

    protected abstract State updateState(State state, A action, P percept, Model model);

    private Rule<A> ruleMatch(State state) {
        return rules.stream().filter(r -> r.evaluate(state)).findFirst().orElse(null);
    }
}
